// @flow
import * as React from 'react'
import type {
  Config,
  Decorator,
  FieldState,
  FieldSubscription,
  FieldValidator,
  FormApi,
  FormState,
  FormSubscription
} from 'final-form'

type SupportedInputs = 'input' | 'select' | 'textarea'

export type ReactContext = {
  reactFinalForm: FormApi
}

export type FieldRenderInputProp = {
  name: $PropertyType<FieldState, 'name'>,
  onBlur: (?SyntheticFocusEvent<*>) => void,
  onChange: (SyntheticInputEvent<*> | any) => void,
  onFocus: (?SyntheticFocusEvent<*>) => void,
  value: $PropertyType<FieldState, 'value'>,
  checked?: boolean
}

export type FieldRenderMetaProp = $Diff<
  FieldState,
  {
    name: $PropertyType<FieldState, 'name'>,
    value: $PropertyType<FieldState, 'value'>,
    length: $PropertyType<FieldState, 'length'>,
    change: $PropertyType<FieldState, 'change'>,
    blur: $PropertyType<FieldState, 'blur'>,
    focus: $PropertyType<FieldState, 'focus'>
  }
>

export type FieldRenderProps = {
  input: FieldRenderInputProp,
  meta: FieldRenderMetaProp
}

export type FormRenderProps = {
  handleSubmit: (?SyntheticEvent<HTMLFormElement>) => ?Promise<?Object>,
  form: FormApi
} & FormState

export type FormSpyRenderProps = {
  form: FormApi
} & FormState

export type RenderableProps<T> = {
  component?: React.ComponentType<*> | SupportedInputs,
  children?: ((props: T) => React.Node) | React.Node,
  render?: (props: T) => React.Node
}

export type FormProps = {
  subscription?: FormSubscription,
  decorators?: Decorator[],
  initialValuesEqual?: (?Object, ?Object) => boolean
} & Config &
  RenderableProps<FormRenderProps>

export type FieldProps = {
  allowNull?: boolean,
  defaultValue?: any,
  format?: (value: any, name: string) => any,
  formatOnBlur?: boolean,
  initialValue?: any,
  isEqual?: (a: any, b: any) => boolean,
  name: string,
  parse?: (value: any, name: string) => any,
  subscription?: FieldSubscription,
  validate?: FieldValidator,
  validateFields?: string[],
  value?: any
} & RenderableProps<FieldRenderProps> & {
    component?: React.ComponentType<*> | SupportedInputs
  }

export type FieldPropsWithForm = {
  reactFinalForm: FormApi
} & FieldProps

export type FormSpyProps = {
  onChange?: (formState: FormState) => void,
  subscription?: FormSubscription
} & RenderableProps<FormSpyRenderProps>

export type FormSpyPropsWithForm = {
  reactFinalForm: FormApi
} & FormSpyProps
